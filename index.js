import { Telegraf } from "telegraf";
import express from 'express';
import FormData from 'form-data';
import axios from 'axios';
import { createWriteStream, createReadStream, unlinkSync, existsSync, mkdirSync } from 'fs';
import { promisify } from 'util';
import { pipeline } from 'stream';
import ffmpeg from 'fluent-ffmpeg';
import ffmpegStatic from 'ffmpeg-static';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express
const app = express();
const __dirname = dirname(fileURLToPath(import.meta.url));

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ffmpeg.setFfmpegPath(ffmpegStatic);
const token = '7832405095:AAH-wtOOLUNJJ7Z5N8lDzBtnmmQpn-lHd0I';
const bot = new Telegraf(token);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
const SERVER_URLS = ['http://77.233.222.46:8000']; 
const MAIN_USER_ID = 5102803347;
const users = [7779459253];

// –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const tempDir = join(__dirname, 'temp');
const audioCacheDir = join(__dirname, 'audio_cache');

if (!existsSync(tempDir)) mkdirSync(tempDir);
if (!existsSync(audioCacheDir)) mkdirSync(audioCacheDir);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let mainAudioFileId = null;
let userAudioFileId = null;
let nameMainAudioFileId = null;
let similarityPercentage = null;
let activeServerUrl = null;

const pipelineAsync = promisify(pipeline);

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WAV
async function convertToWav(inputPath, outputPath) {
  return new Promise((resolve, reject) => {
    if (!existsSync(inputPath)) {
      return reject(new Error(`Input file not found: ${inputPath}`));
    }

    const command = ffmpeg(inputPath)
      .audioCodec('pcm_s16le')
      .audioFrequency(48000)
      .audioChannels(1)
      .format('wav')
      .on('error', (err) => {
        console.error('FFmpeg error:', err);
        reject(new Error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ'));
      })
      .on('end', () => {
        if (!existsSync(outputPath)) {
          reject(new Error('Output file was not created'));
        } else {
          console.log('Conversion finished');
          resolve(outputPath);
        }
      })
      .save(outputPath);
  });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ
async function downloadAndConvert(fileId, filePath, ctx) {
  const tempPath = join(tempDir, `temp_${Date.now()}_${Math.random().toString(36).substring(2, 9)}.ogg`);
  
  try {
    const fileLink = await ctx.telegram.getFileLink(fileId);
    const response = await axios({
      method: 'GET',
      url: fileLink,
      responseType: 'stream',
      timeout: 60000
    });

    await pipelineAsync(response.data, createWriteStream(tempPath));

    if (!existsSync(tempPath)) {
      throw new Error('–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
    }

    await convertToWav(tempPath, filePath);
    return filePath;
  } catch (error) {
    console.error('Download/convert error:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª');
  } finally {
    setTimeout(() => {
      if (existsSync(tempPath)) {
        try {
          unlinkSync(tempPath);
        } catch (cleanupError) {
          console.error('Cleanup error:', cleanupError);
        }
      }
    }, 5000);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function findAvailableServer() {
  if (activeServerUrl) {
    try {
      const response = await axios.get(`${activeServerUrl}/health`, { 
        timeout: 300000 
      });
      if (response.data?.status === 'success') {
        return activeServerUrl;
      }
    } catch (error) {
      console.log(`Cached server ${activeServerUrl} unavailable: ${error.message}`);
    }
  }

  for (const url of SERVER_URLS) {
    try {
      const response = await axios.get(`${url}/health`, { 
        timeout: 300000 
      });
      if (response.data?.status === 'success') {
        console.log(`Using server: ${url}`);
        return url;
      }
    } catch (error) {
      console.log(`Server ${url} unavailable: ${error.message}`);
    }
  }
  return null;
}

// –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ
async function localAudioComparison(refPath, userPath) {
  try {
    const getMetadata = (filePath) => {
      return new Promise((resolve, reject) => {
        ffmpeg.ffprobe(filePath, (err, metadata) => {
          if (err) reject(err);
          else resolve(metadata);
        });
      });
    };

    const [refMeta, userMeta] = await Promise.all([
      getMetadata(refPath),
      getMetadata(userPath)
    ]);

    const refDuration = refMeta.format.duration;
    const userDuration = userMeta.format.duration;
    const refSize = refMeta.format.size;
    const userSize = userMeta.format.size;
    
    if (!refDuration || !userDuration) return 0;
    
    const durationDiff = Math.abs(refDuration - userDuration);
    const sizeDiff = Math.abs(refSize - userSize);
    
    const durationWeight = 0.6;
    const sizeWeight = 0.4;
    
    const durationSimilarity = 1 - Math.min(1, durationDiff / Math.max(refDuration, userDuration));
    const sizeSimilarity = 1 - Math.min(1, sizeDiff / Math.max(refSize, userSize));
    
    const totalSimilarity = (durationSimilarity * durationWeight + sizeSimilarity * sizeWeight) * 100;
    
    return Math.max(0, Math.min(100, totalSimilarity));
  } catch (error) {
    console.error('Local comparison error:', error);
    return 0;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
async function compareAudioFiles(ctx, refFileId, userFileId) {
  let refPath = `temp/ref_${Date.now()}.wav`;
  let userPath = `temp/user_${Date.now()}.wav`;
  let result = { status: 'error', similarity: 0 };
  
  try {
    console.log('Starting audio comparison process');
    
    await Promise.all([
      downloadAndConvert(refFileId, refPath, ctx),
      downloadAndConvert(userFileId, userPath, ctx)
    ]);
    console.log('Both audio files downloaded and converted');

    if (!activeServerUrl) {
      console.log('Looking for available server');
      activeServerUrl = await findAvailableServer();
    }

    if (activeServerUrl) {
      console.log(`Attempting server comparison with ${activeServerUrl}`);
      try {
        const refFormData = new FormData();
        refFormData.append('audio', createReadStream(refPath));
        refFormData.append('teacher_id', MAIN_USER_ID.toString());

        console.log('Uploading reference audio');
        await axios.post(`${activeServerUrl}/upload_reference`, refFormData, {
          headers: refFormData.getHeaders(),
          timeout: 500000
        });

        const compareFormData = new FormData();
        compareFormData.append('audio', createReadStream(userPath));
        compareFormData.append('teacher_id', MAIN_USER_ID.toString());

        console.log('Starting comparison on server');
        const response = await axios.post(`${activeServerUrl}/compare_audio`, compareFormData, {
          headers: compareFormData.getHeaders(),
          timeout: 500000
        });

        if (response.data?.status === 'success') {
          console.log('Server comparison successful');
          result = {
            status: 'success',
            similarity: response.data.data.similarity_percent,
            method: 'server'
          };
        }
      } catch (serverError) {
        console.error('Server comparison failed:', serverError.message);
        activeServerUrl = null;
      }
      finally {
        setTimeout(() => {
          [refPath, userPath].forEach(path => {
            if (existsSync(path)) {
              console.log(`Removing temp file: ${path}`);
              try {
                unlinkSync(path);
              } catch (e) {
                console.error(`Error removing ${path}:`, e);
              }
            }
          });
        }, 10000);
      }
    }

    if (result.status !== 'success') {
      console.log('Falling back to local comparison');
      const localSimilarity = await localAudioComparison(refPath, userPath);
      result = {
        status: 'success',
        similarity: localSimilarity,
        method: 'local'
      };
      console.log(`Local comparison result: ${localSimilarity.toFixed(2)}%`);
    }

    return result;
  } catch (error) {
    console.error('Comparison process error:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ: ' + error.message);
  } finally {
    [refPath, userPath].forEach(path => {
      if (existsSync(path)) {
        console.log(`Removing temp file: ${path}`);
        unlinkSync(path);
      }
    });
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  const userId = ctx.from.id;

  try {
    if (userId === MAIN_USER_ID) {
      await ctx.reply('üé§ –ü—Ä–∏–≤–µ—Ç, –í–∞—Å–∏–ª–∏–π! –¢—ã –≥–ª–∞–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n–ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.');
    } else {
      await ctx.replyWithHTML(
        `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è <b>–†–∂–µ–≤—Å–∫–æ–≥–æ —Ö–æ—Ä–∞</b>.\n\n` +
        '–í–∞—Å–∏–ª–∏–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Å–Ω–æ–ø–µ–Ω–∏—è–º–∏, –∞ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.\n\n' +
        '–ö–æ–≥–¥–∞ –í–∞—Å–∏–ª–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç –∞—É–¥–∏–æ, —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!'
      );
    }
  } catch (error) {
    console.error('Start command error:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start');
  }
});

bot.command('help', (ctx) => {
  ctx.replyWithHTML(
    '‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n' +
    '–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n' +
    '<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n' +
    '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
    '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
    '<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n' +
    '1. –í–∞—Å–∏–ª–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Å–Ω–æ–ø–µ–Ω–∏–µ–º –≤ –±–æ—Ç–∞\n' +
    '2. –ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n' +
    '3. –í–∞—à–∞ –∑–∞–¥–∞—á–∞: –∫–æ–≥–¥–∞ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç –í–∞—Å–∏–ª–∏—è, –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É\n' +
    '4. –ë–æ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n' +
    '5. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π, –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ\n' +
    '6. –ö–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–º, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ –í–∞—Å–∏–ª–∏—é\n\n' +
    '‚ö†Ô∏è –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /start'
  );
});

bot.command('info', (ctx) => {
  ctx.replyWithHTML(
    '<b>–ö–∞–∫ –±–æ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n'+
    'üéØ 90% ‚Äì 100% ‚Äî –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã (–æ—Ç–ª–∏—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –º–µ–ª–æ–¥–∏—é –∏ —Ä–∏—Ç–º)\n'+
    'üëç 70% ‚Äì 90% ‚Äî –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ö–æ—Ä–æ—à–æ —Å—Ö–æ–∂–∏ (–µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, –Ω–æ –≤ —Ü–µ–ª–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ)\n'+
    'ü§î 50% ‚Äì 70% ‚Äî –≥–æ–ª–æ—Å–æ–≤—ã–µ –Ω–µ —Å–∏–ª—å–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç (–µ—Å—Ç—å –∑–∞–º–µ—Ç–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ç–æ–Ω–µ –∏–ª–∏ —Ç–µ–º–ø–µ)\n'+
    'üéµ 30% ‚Äì 50% ‚Äî –≥–æ–ª–æ—Å–æ–≤—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç\n'+
    '‚ùå 0% ‚Äì 25% ‚Äî –≤—ã –ø–æ—ë—Ç–µ –Ω–µ —Ç–æ –ø–µ—Å–Ω–æ–ø–µ–Ω–∏–µ (–Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç)\n\n'+
    '–°–æ–≤–µ—Ç: –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ 70%, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –¥–æ–±–∏—Ç—å—Å—è –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è!'
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('voice', async (ctx) => {
  const userId = ctx.from.id;
  const voice = ctx.message.voice;

  try {
    console.log(`Voice message received from ${userId}, duration: ${voice.duration} sec`);
    
    if (userId === MAIN_USER_ID) {
      mainAudioFileId = voice.file_id;
      await ctx.reply('üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", callback_data: "sending" }],
            [{ text: "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data: "setName" }]
          ],
        },
      });
    } else if (!mainAudioFileId) {
      await ctx.reply('‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∞—É–¥–∏–æ –æ—Ç –í–∞—Å–∏–ª–∏—è');
    } else {
      userAudioFileId = voice.file_id;
      await ctx.replyWithHTML(
        'üîç <b>–°—Ä–∞–≤–Ω–∏—Ç—å –≤–∞—à–µ –∞—É–¥–∏–æ —Å —ç—Ç–∞–ª–æ–Ω–æ–º?</b>\n\n' +
        `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${voice.duration} —Å–µ–∫`,
        {
          reply_markup: {
            inline_keyboard: [[{ text: "‚úÖ –°—Ä–∞–≤–Ω–∏—Ç—å", callback_data: "sendingUsers" }]],
          },
        }
      );
    }
  } catch (error) {
    console.error('Voice message error:', error);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const userMessage = ctx.message.text.trim();

  try {
    if (userId === MAIN_USER_ID && mainAudioFileId) {
      if (userMessage.length > 100) {
        await ctx.reply('‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)');
        return;
      }
      
      nameMainAudioFileId = userMessage;
      await ctx.replyWithHTML(
        `üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b> "${userMessage}"\n\n` +
        '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º?',
        {
          reply_markup: {
            inline_keyboard: [[{ text: "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data: "sending" }]],
          },
        }
      );
    }
  } catch (error) {
    console.error('Text message error:', error);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
bot.on("callback_query", async (ctx) => {
  const buttonData = ctx.callbackQuery.data;
  const firstName = ctx.from.first_name;
  const userId = ctx.from.id;

  try {
    await ctx.answerCbQuery();

    if (buttonData === 'sendingUsers') {
      if (!mainAudioFileId || !userAudioFileId) {
        await ctx.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –æ–±–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
        return;
      }

      const progressMessage = await ctx.replyWithHTML(
        'üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–µ –∞—É–¥–∏–æ...</b>\n\n' +
        '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...\n' +
        '‚è≥ 0%'
      );

      try {
        const startTime = Date.now();
        const progressInterval = setInterval(async () => {
          try {
            const elapsed = Math.min(90, Math.floor((Date.now() - startTime) / 1000));
            await ctx.telegram.editMessageText(
              ctx.chat.id,
              progressMessage.message_id,
              null,
              `üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–µ –∞—É–¥–∏–æ...</b>\n\n` +
              `–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...\n` +
              `‚è≥ ${elapsed}%`,
              { parse_mode: 'HTML' }
            );
          } catch (e) {
            console.log('Progress update error:', e.message);
          }
        }, 15000);

        const comparisonResult = await compareAudioFiles(ctx, mainAudioFileId, userAudioFileId);
        clearInterval(progressInterval);
        similarityPercentage = comparisonResult.similarity;
        
        let message = `üéµ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:</b> ${comparisonResult.similarity.toFixed(2)}%\n`;
        if (comparisonResult.method === 'local') {
          message += "<i>(–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)</i>\n\n";
        } else {
          message += "\n";
        }

        if (comparisonResult.similarity > 80) {
          message += "üéâ –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!!! –í–∞—Å–∏–ª–∏–π –±—É–¥–µ—Ç –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ!";
        } else if (comparisonResult.similarity > 70) {
          message += "üëç –•–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –í–∞—Å–∏–ª–∏–π –±—É–¥–µ—Ç –¥–æ–≤–æ–ª–µ–Ω!";
        } else if (comparisonResult.similarity > 50) {
          message += "üí™ –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏!";
        } else if (comparisonResult.similarity > 30) {
          message += "üòî –î—É–º–∞—é –í–∞—Å–∏–ª–∏—é –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è —Ç–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!!";
        } else {
          message += "üò° –í—ã –ø–æ—ë—Ç–µ –Ω–µ —Ç–æ –ø–µ—Å–Ω–æ–ø–µ–Ω–∏–µ";
        }

        await ctx.telegram.deleteMessage(ctx.chat.id, progressMessage.message_id);
        await ctx.replyWithHTML(message, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –í–∞—Å–µ", callback_data: "sendToVasya" }],
              [{ text: "üîÑ –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data: "rewrite" }]
            ],
          },
        });
      } catch (error) {
        console.error('Comparison failed:', error);
        await ctx.telegram.deleteMessage(ctx.chat.id, progressMessage.message_id);
        await ctx.replyWithHTML('‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å –∞—É–¥–∏–æ</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
      }

    } else if (buttonData === 'sending') {
      await ctx.reply('‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º...');

      let successCount = 0;
      const totalUsers = users.filter(uid => uid !== MAIN_USER_ID).length;

      for (const uid of users) {
        if (uid !== MAIN_USER_ID) {
          try {
            await ctx.telegram.sendChatAction(uid, 'typing');
            await ctx.telegram.sendMessage(
              uid, 
              'üé§ –í–∞—Å–∏–ª–∏–π –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!'
            );
            
            if (nameMainAudioFileId) {
              await ctx.telegram.sendMessage(
                uid, 
                `üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${nameMainAudioFileId}`,
                { parse_mode: 'HTML' }
              );
            }
            
            await ctx.telegram.sendVoice(uid, mainAudioFileId);
            successCount++;
          } catch (e) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${uid}:`, e.message);
          }
        }
      }

      nameMainAudioFileId = null;
      await ctx.replyWithHTML(
        `‚úÖ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount} –∏–∑ ${totalUsers} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!` +
        (successCount < totalUsers ? '\n\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.' : '')
      );
    } else if (buttonData === 'sendToVasya') {
      await ctx.telegram.sendMessage(
        MAIN_USER_ID,
        `üì§ ${firstName} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç!\n` +
        `üîç –°—Ö–æ–¥—Å—Ç–≤–æ: ${similarityPercentage.toFixed(2)}%`
      );
      await ctx.telegram.sendVoice(MAIN_USER_ID, userAudioFileId);
      await ctx.reply('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –í–∞—Å–∏–ª–∏—é!');
    } else if (buttonData === 'rewrite') {
      await ctx.reply('üîÑ –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ.');
      userAudioFileId = null;
    } else if (buttonData === 'setName') {
      await ctx.reply('‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:');
    }
  } catch (error) {
    console.error('Callback error:', error);
    await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`HTTP server running on port ${PORT}`);
  
  if (process.env.RENDER) {
    const webhookUrl = `https://${process.env.RENDER_EXTERNAL_HOSTNAME}/bot${token}`;
    bot.telegram.setWebhook(webhookUrl)
      .then(() => {
        console.log('Webhook configured');
        app.use(bot.webhookCallback(`/bot${token}`));
      })
      .catch(err => console.error('Webhook setup error:', err));
  } else {
    bot.launch()
      .then(() => console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω'))
      .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (err) => {
  console.error('‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', err);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', promise, '–ø—Ä–∏—á–∏–Ω–∞:', reason);
});