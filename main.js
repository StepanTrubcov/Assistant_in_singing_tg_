import { Telegraf } from "telegraf";
import ffmpeg from 'fluent-ffmpeg';
import ffmpegInstaller from '@ffmpeg-installer/ffmpeg';
import fs from 'fs';
import { execSync } from 'child_process';

// const token = '7523112354:AAF84dgow0u0klV8BFRhvJRwiQHFKtTCsbk'

const token = process.env.TOKEN;

const bot = new Telegraf(token)
// const MAIN_USER_ID = 5102803347
// //779619123
// const users = [7779459253];

const MAIN_USER_ID = parseInt(process.env.MAIN_USER_ID);
const users = JSON.parse(process.env.USERS || '[]');

let mainAudioFileId = null;
let userAudioFileId = null;

let nameMainAudioFileId = null;

let similarityPercentage = null;

ffmpeg.setFfmpegPath('ffmpeg');

async function downloadAndConvertVoice(ctx, fileId, outputPath) {
  const tempPath = `temp_${Date.now()}.ogg`;

  try {
    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const fileLink = await ctx.telegram.getFileLink(fileId);
    const response = await fetch(fileLink);
    const buffer = Buffer.from(await response.arrayBuffer());
    fs.writeFileSync(tempPath, buffer);
    console.log(`–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${tempPath} (${buffer.length} –±–∞–π—Ç)`);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV
    await new Promise((resolve, reject) => {
      const command = ffmpeg(tempPath)
        .audioCodec('pcm_s16le')
        .audioFrequency(44100)
        .audioChannels(1)
        .format('wav')
        .on('start', (cmd) => console.log('–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:', cmd))
        .on('progress', (progress) => {
          let progressInfo = '';
          if (progress.percent !== undefined) {
            progressInfo += `${progress.percent.toFixed(2)}% `;
          }
          if (progress.timemark) {
            progressInfo += `[${progress.timemark}] `;
          }
          if (progress.frames) {
            progressInfo += `${progress.frames} frames`;
          }
          console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å:', progressInfo || '–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        })
        .on('error', (err) => {
          console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', err);
          deleteTempFile(tempPath);
          reject(err);
        })
        .on('end', () => {
          console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          deleteTempFile(tempPath);
          resolve();
        });

      // –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      command.on('codecData', (data) => {
        console.log(`–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${data.duration || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}`);
      });

      command.save(outputPath);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const stats = fs.statSync(outputPath);
    console.log(`–†–∞–∑–º–µ—Ä WAV —Ñ–∞–π–ª–∞: ${stats.size} –±–∞–π—Ç`);
  } catch (err) {
    deleteTempFile(tempPath);
    throw err;
  }
}

// async function getPitchAnalysis(wavPath) {
//   try {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ sox –∏ ffmpeg
//     const freqCommand = `sox ${wavPath} -n stat -freq 2>&1 | grep -oP '\\d+\\.\\d+' | head -1`;
//     const freq = parseFloat(execSync(freqCommand).toString()) || 0;
    
//     // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ ffmpeg
//     const statsCommand = `ffmpeg -i ${wavPath} -af astats=metadata=1:reset=1 -f null - 2>&1 | grep -E 'Overall.Frequency|Peak.level'`;
//     const statsOutput = execSync(statsCommand).toString();
    
//     const freqMatch = statsOutput.match(/Overall\.Frequency:\s*(\d+\.?\d*)/);
//     const peakMatch = statsOutput.match(/Peak\.level:\s*(-?\d+\.?\d*)/);
    
//     return {
//       avgFrequency: freqMatch ? parseFloat(freqMatch[1]) : freq,
//       peakLevel: peakMatch ? parseFloat(peakMatch[1]) : 0,
//       pitchCount: 1
//     };
//   } catch (error) {
//     console.error('Advanced pitch analysis failed:', error);
//     return { avgFrequency: 0, peakLevel: 0, pitchCount: 0 };
//   }
// }

// async function getBasicFrequencyAnalysis(wavPath) {
//   try {
//     const command = `ffmpeg -i ${wavPath} -af "astats=metadata=1:reset=1" -f null - 2>&1 | grep "Overall.Frequency"`;
//     const output = execSync(command).toString();
//     const freqMatch = output.match(/Overall\.Frequency:\s*(\d+\.?\d*)/);
    
//     if (freqMatch) {
//       return {
//         avgFrequency: parseFloat(freqMatch[1]),
//         pitchCount: 1
//       };
//     }
//     throw new Error('No frequency data found');
//   } catch (error) {
//     console.error('Basic frequency analysis failed:', error);
//     throw new Error('Could not analyze pitch: ' + error.message);
//   }
// }

function deleteTempFile(path) {
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(`–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: ${path}`);
    }
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${path}:`, err);
  }
}

// async function getAudioFeatures(wavPath) {
//   try {
//     // 1. –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
//     const durationCommand = `ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 ${wavPath}`;
//     const duration = parseFloat(execSync(durationCommand).toString());

//     // 2. –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∏ –ø–∏–∫–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
//     const analysisCommand = `ffmpeg -i ${wavPath} -af "ebur128=peak=true" -f null - 2>&1 | grep -E 'I:|Peak:'`;
//     const analysisOutput = execSync(analysisCommand, { maxBuffer: 1024 * 1024 * 5 }).toString();

//     // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
//     const loudnessMatch = analysisOutput.match(/I:\s*(-?\d+\.\d+)\s*LUFS/);
//     const peakMatch = analysisOutput.match(/Peak:\s*(-?\d+\.\d+)\s*dBFS/);

//     if (!loudnessMatch || !peakMatch) {
//       throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä–æ–º–∫–æ—Å—Ç–∏');
//     }

//     return {
//       duration,
//       loudness: parseFloat(loudnessMatch[1]),
//       peak: parseFloat(peakMatch[1])
//     };
//   } catch (error) {
//     console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ:', error);
//     throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª');
//   }
// }
async function getEnhancedAudioAnalysis(wavPath) {
  const pitch = await getPitchAnalysis(wavPath);
  const features = await getAudioFeatures(wavPath);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  const spectralCommand = `sox ${wavPath} -n stat -spectral 2>&1 | grep -E 'Flatness|Crest'`;
  const spectralOutput = execSync(spectralCommand).toString();
  
  return {
    ...pitch,
    ...features,
    spectral: spectralOutput.includes('Flatness') ? 
      parseFloat(spectralOutput.match(/Flatness:\s*(\d+\.?\d*)/)[1]) : 0
  };
}

function calculateEnhancedSimilarity(main, user) {
  // –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ 10 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
  const params = [
    { name: 'frequency', diff: Math.abs(main.avgFrequency - user.avgFrequency), weight: 0.3 },
    { name: 'loudness', diff: Math.abs(main.loudness - user.loudness), weight: 0.2 },
    { name: 'duration', diff: Math.abs(main.duration - user.duration), weight: 0.15 },
    { name: 'spectral', diff: Math.abs(main.spectral - user.spectral), weight: 0.15 },
    { name: 'peak', diff: Math.abs(main.peak - user.peak), weight: 0.2 }
  ];

  return params.reduce((total, {diff, weight}) => {
    const similarity = 100 * (1 - Math.min(diff / 100, 1));
    return total + similarity * weight;
  }, 0);
}

function getDetailedPitchComment(main, user) {
  const diff = main.avgFrequency - user.avgFrequency;
  const absDiff = Math.abs(diff);
  
  let comment = '';
  if (absDiff < 20) comment = '–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Ç–æ–Ω–∞ üéµ';
  else if (absDiff < 50) comment = '–ù–µ–±–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Ç–æ–Ω–∞';
  else comment = '–ó–∞–º–µ—Ç–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ –≤ –≤—ã—Å–æ—Ç–µ —Ç–æ–Ω–∞';
  
  return `${comment}\n–û—Ä–∏–≥–∏–Ω–∞–ª: ${main.avgFrequency.toFixed(2)} –ì—Ü | –í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç: ${user.avgFrequency.toFixed(2)} –ì—Ü`;
}

async function compareAudioFiles(ctx, mainAudioFileId, userAudioFileId) {
  const mainWavPath = 'main.wav';
  const userWavPath = 'user.wav';

  try {
    await Promise.all([
      downloadAndConvertVoice(ctx, mainAudioFileId, mainWavPath),
      downloadAndConvertVoice(ctx, userAudioFileId, userWavPath)
    ]);

    // –ê–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const [mainAnalysis, userAnalysis] = await Promise.all([
      getEnhancedAudioAnalysis(mainWavPath),
      getEnhancedAudioAnalysis(userWavPath)
    ]);

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const similarity = calculateEnhancedSimilarity(mainAnalysis, userAnalysis);
    
    return {
      similarity: Math.min(99, similarity), // –ú–∞–∫—Å–∏–º—É–º 99% –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
      pitchComment: getDetailedPitchComment(mainAnalysis, userAnalysis)
    };
  } catch (error) {
    console.error('Comparison error:', error);
    throw error;
  } finally {
    [mainWavPath, userWavPath].forEach(path => {
      if (fs.existsSync(path)) fs.unlinkSync(path);
    });
  }
}

//.............................................

bot.command('start', async (ctx) => {
  const userId = ctx.from.id;

  if (userId === MAIN_USER_ID) {
    ctx.reply('–ü—Ä–∏–≤–µ—Ç —Ç—ã –≥–ª–∞–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞!');
  } else {
    ctx.reply('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –†–∂–µ–≤—Å–∫–æ–≥–æ —Ö–æ—Ä–∞. –í –±–æ—Ç–µ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –í–∞—Å–∏–ª–∏–π. –í–∞—Å–∏–ª–∏–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –±–æ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Å–Ω–æ–ø–µ–Ω–∏–µ–º! –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏ —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å —ç—Ç–∏–º –ø–µ—Å–Ω–æ–ø–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—ë—à—å —Ç—ã!');
    setTimeout(() => {
      ctx.reply('–ö–æ–≥–¥–∞ –í–∞—Å–∏–ª–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç –∞—É–¥–∏–æ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ!');
    }, 200);
  }
});

bot.on('voice', async (ctx) => {
  const userId = ctx.from.id;
  const voice = ctx.message.voice.file_id;

  if (userId === MAIN_USER_ID) {
    mainAudioFileId = voice;
    ctx.reply('–•–æ—Ç–∏—Ç–µ –Ω–∞–∑–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ? –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Ç–æ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è!', {
      reply_markup: {
        inline_keyboard: [[{ text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data: "sending" }, { text: "–ù–∞–∑–≤–∞—Ç—å", callback_data: "setName" }]],
      },
    });
  } else {
    userAudioFileId = voice;
    ctx.reply('–°—Ä–∞–≤–Ω–∏—Ç—å –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏? –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∑–∞–Ω–æ–≤–æ!', {
      reply_markup: {
        inline_keyboard: [[{ text: "–°—Ä–∞–≤–Ω–∏—Ç—å", callback_data: "sendingUsers" }]],
      },
    });
  }
});

bot.on('text', (ctx) => {
  const userId = ctx.from.id;
  const userMessage = ctx.message.text;
  if (userId === MAIN_USER_ID) {
    nameMainAudioFileId = userMessage;
    ctx.reply(`–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ - ${userMessage}? –ï—Å–ª–∏ –Ω–µ—Ç –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º!`, {
      reply_markup: {
        inline_keyboard: [[{ text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data: "sending" }]],
      },
    });
  }
});

bot.on("callback_query", async (ctx) => {
  const buttonData = ctx.callbackQuery.data;
  const firstName = ctx.from.first_name;

  try {
    if (buttonData === 'sendingUsers') {
      if (!mainAudioFileId || !userAudioFileId) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
      }

      await ctx.answerCbQuery('–ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ...');
      try {
        const comparisonResult = await compareAudioFiles(ctx, mainAudioFileId, userAudioFileId);

        similarityPercentage = comparisonResult.similarity
        
        let message = `–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${comparisonResult.similarity}%\n`;
        message += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≤—ã—Å–æ—Ç–µ —Ç–æ–Ω–∞: ${comparisonResult.pitchComment}`;
        
        await ctx.reply(message, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—Å–µ?", callback_data: "sendToVasya" }],
              [{ text: "–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data: "rewrite" }]
            ],
          },
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞.');
      }
    } else if (buttonData === 'sending') {
      await ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...');

      for (const uid of users) {
        if (uid !== MAIN_USER_ID) {
          try {
            await ctx.telegram.sendMessage(uid, '–í–∞—Å–∏–ª–∏–π –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç–Ω—ã–π –≥–æ–ª–æ—Å.');
            if (nameMainAudioFileId) {
              await ctx.telegram.sendMessage(uid, `–ù–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ - ${nameMainAudioFileId}`)
            }
            await ctx.telegram.sendVoice(uid, mainAudioFileId);
            nameMainAudioFileId = null;
          } catch (e) {
            console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${uid}:`, e.message);
          }
        }
      }
      await ctx.reply('–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!');
    } else if (buttonData === 'sendToVasya') {
      await ctx.telegram.sendMessage(
        MAIN_USER_ID,
        `${firstName} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç!\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${similarityPercentage}%`
      );
      await ctx.telegram.sendVoice(MAIN_USER_ID, userAudioFileId);
      ctx.reply('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
    } else if (buttonData === 'rewrite') {
      ctx.reply('–ü–µ—Ä–µ–∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –µ–≥–æ –º–Ω–µ!')
    } else if (buttonData === 'setName') {
      ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ!')
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞');
    await ctx.reply(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

bot.launch();